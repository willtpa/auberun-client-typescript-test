/* tslint:disable */
/* eslint-disable */
/**
 * admin API
 * api for the needs of the admin backoffice
 *
 * The version of the OpenAPI document: 1.0
 * Contact: vincent.serpoul@triple-a.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountDetails,
  ProblemDetail,
} from '../models/index';
import {
    AccountDetailsFromJSON,
    AccountDetailsToJSON,
    ProblemDetailFromJSON,
    ProblemDetailToJSON,
} from '../models/index';

export interface GetAccountsAccountIdRequest {
    accountId: string;
    fromTime?: Date;
    toTime?: Date;
    networkCurrencyId?: string;
}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI {

    /**
     * get details on specific account
     * get details on account
     */
    async getAccountsAccountIdRaw(requestParameters: GetAccountsAccountIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountDetails>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling getAccountsAccountId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fromTime'] != null) {
            queryParameters['from_time'] = (requestParameters['fromTime'] as any).toISOString();
        }

        if (requestParameters['toTime'] != null) {
            queryParameters['to_time'] = (requestParameters['toTime'] as any).toISOString();
        }

        if (requestParameters['networkCurrencyId'] != null) {
            queryParameters['network_currency_id'] = requestParameters['networkCurrencyId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/api/v1/accounts/{account-id}`.replace(`{${"account-id"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountDetailsFromJSON(jsonValue));
    }

    /**
     * get details on specific account
     * get details on account
     */
    async getAccountsAccountId(requestParameters: GetAccountsAccountIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountDetails> {
        const response = await this.getAccountsAccountIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
