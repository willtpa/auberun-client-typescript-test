/* tslint:disable */
/* eslint-disable */
/**
 * admin API
 * api for the needs of the admin backoffice
 *
 * The version of the OpenAPI document: 1.0
 * Contact: vincent.serpoul@triple-a.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CountryCode2 } from './CountryCode2';
import {
    CountryCode2FromJSON,
    CountryCode2FromJSONTyped,
    CountryCode2ToJSON,
} from './CountryCode2';

/**
 * 
 * @export
 * @interface Corporate
 */
export interface Corporate {
    /**
     * 
     * @type {string}
     * @memberof Corporate
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Corporate
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Corporate
     */
    email?: string;
    /**
     * 
     * @type {Date}
     * @memberof Corporate
     */
    createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Corporate
     */
    street?: string;
    /**
     * 
     * @type {string}
     * @memberof Corporate
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof Corporate
     */
    postalCode?: string;
    /**
     * 
     * @type {CountryCode2}
     * @memberof Corporate
     */
    country?: CountryCode2;
    /**
     * 
     * @type {string}
     * @memberof Corporate
     */
    companyName?: string;
    /**
     * 
     * @type {CountryCode2}
     * @memberof Corporate
     */
    registrationCountry?: CountryCode2;
    /**
     * 
     * @type {Date}
     * @memberof Corporate
     */
    incorporationDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof Corporate
     */
    entityType?: string;
}

/**
 * Check if a given object implements the Corporate interface.
 */
export function instanceOfCorporate(value: object): value is Corporate {
    return true;
}

export function CorporateFromJSON(json: any): Corporate {
    return CorporateFromJSONTyped(json, false);
}

export function CorporateFromJSONTyped(json: any, ignoreDiscriminator: boolean): Corporate {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'email': json['email'] == null ? undefined : json['email'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'street': json['street'] == null ? undefined : json['street'],
        'city': json['city'] == null ? undefined : json['city'],
        'postalCode': json['postal_code'] == null ? undefined : json['postal_code'],
        'country': json['country'] == null ? undefined : CountryCode2FromJSON(json['country']),
        'companyName': json['company_name'] == null ? undefined : json['company_name'],
        'registrationCountry': json['registration_country'] == null ? undefined : CountryCode2FromJSON(json['registration_country']),
        'incorporationDate': json['incorporation_date'] == null ? undefined : (new Date(json['incorporation_date'])),
        'entityType': json['entity_type'] == null ? undefined : json['entity_type'],
    };
}

export function CorporateToJSON(value?: Corporate | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'email': value['email'],
        'created_at': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'street': value['street'],
        'city': value['city'],
        'postal_code': value['postalCode'],
        'country': CountryCode2ToJSON(value['country']),
        'company_name': value['companyName'],
        'registration_country': CountryCode2ToJSON(value['registrationCountry']),
        'incorporation_date': value['incorporationDate'] == null ? undefined : ((value['incorporationDate']).toISOString().substring(0,10)),
        'entity_type': value['entityType'],
    };
}

