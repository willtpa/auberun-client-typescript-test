/* tslint:disable */
/* eslint-disable */
/**
 * admin API
 * api for the needs of the admin backoffice
 *
 * The version of the OpenAPI document: 1.0
 * Contact: vincent.serpoul@triple-a.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CountryCode2 } from './CountryCode2';
import {
    CountryCode2FromJSON,
    CountryCode2FromJSONTyped,
    CountryCode2ToJSON,
} from './CountryCode2';
import type { Gender } from './Gender';
import {
    GenderFromJSON,
    GenderFromJSONTyped,
    GenderToJSON,
} from './Gender';

/**
 * 
 * @export
 * @interface Individual
 */
export interface Individual {
    /**
     * 
     * @type {string}
     * @memberof Individual
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Individual
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Individual
     */
    email?: string;
    /**
     * 
     * @type {Date}
     * @memberof Individual
     */
    createdAt?: Date;
    /**
     * 
     * @type {Gender}
     * @memberof Individual
     */
    gender?: Gender;
    /**
     * 
     * @type {string}
     * @memberof Individual
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof Individual
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof Individual
     */
    street?: string;
    /**
     * 
     * @type {string}
     * @memberof Individual
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof Individual
     */
    postalCode?: string;
    /**
     * 
     * @type {CountryCode2}
     * @memberof Individual
     */
    country?: CountryCode2;
    /**
     * 
     * @type {CountryCode2}
     * @memberof Individual
     */
    nationality?: CountryCode2;
    /**
     * 
     * @type {CountryCode2}
     * @memberof Individual
     */
    birthCountry?: CountryCode2;
    /**
     * 
     * @type {Date}
     * @memberof Individual
     */
    birthDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof Individual
     */
    birthPlace?: string;
    /**
     * 
     * @type {string}
     * @memberof Individual
     */
    entityType?: string;
}

/**
 * Check if a given object implements the Individual interface.
 */
export function instanceOfIndividual(value: object): value is Individual {
    return true;
}

export function IndividualFromJSON(json: any): Individual {
    return IndividualFromJSONTyped(json, false);
}

export function IndividualFromJSONTyped(json: any, ignoreDiscriminator: boolean): Individual {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'email': json['email'] == null ? undefined : json['email'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'gender': json['gender'] == null ? undefined : GenderFromJSON(json['gender']),
        'firstName': json['first_name'] == null ? undefined : json['first_name'],
        'lastName': json['last_name'] == null ? undefined : json['last_name'],
        'street': json['street'] == null ? undefined : json['street'],
        'city': json['city'] == null ? undefined : json['city'],
        'postalCode': json['postal_code'] == null ? undefined : json['postal_code'],
        'country': json['country'] == null ? undefined : CountryCode2FromJSON(json['country']),
        'nationality': json['nationality'] == null ? undefined : CountryCode2FromJSON(json['nationality']),
        'birthCountry': json['birth_country'] == null ? undefined : CountryCode2FromJSON(json['birth_country']),
        'birthDate': json['birth_date'] == null ? undefined : (new Date(json['birth_date'])),
        'birthPlace': json['birth_place'] == null ? undefined : json['birth_place'],
        'entityType': json['entity_type'] == null ? undefined : json['entity_type'],
    };
}

export function IndividualToJSON(value?: Individual | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'email': value['email'],
        'created_at': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'gender': GenderToJSON(value['gender']),
        'first_name': value['firstName'],
        'last_name': value['lastName'],
        'street': value['street'],
        'city': value['city'],
        'postal_code': value['postalCode'],
        'country': CountryCode2ToJSON(value['country']),
        'nationality': CountryCode2ToJSON(value['nationality']),
        'birth_country': CountryCode2ToJSON(value['birthCountry']),
        'birth_date': value['birthDate'] == null ? undefined : ((value['birthDate']).toISOString().substring(0,10)),
        'birth_place': value['birthPlace'],
        'entity_type': value['entityType'],
    };
}

